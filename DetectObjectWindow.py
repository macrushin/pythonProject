# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DetectObjectWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np


class DetectObjectWindow(QtWidgets.QMainWindow):
    def __init__(self, parent, file_name):
        super(DetectObjectWindow, self).__init__(parent)
        self.setObjectName("DetectObjectWindow")
        self.resize(1048, 699)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(310, 40, 421, 431))
        self.label.setPixmap(QtGui.QPixmap(file_name).scaled(421, 431))
        self.label.setObjectName("label")
        self.frame = QtWidgets.QLabel(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(590, 50, 421, 431))
        self.frame.setObjectName("frame")
        self.siftButton = QtWidgets.QPushButton(self.centralwidget)
        self.siftButton.setGeometry(QtCore.QRect(130, 540, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.siftButton.setFont(font)
        self.siftButton.setObjectName("siftButton")
        self.surfButton = QtWidgets.QPushButton(self.centralwidget)
        self.surfButton.setGeometry(QtCore.QRect(440, 540, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.surfButton.setFont(font)
        self.surfButton.setObjectName("surfButton")
        self.orbButton = QtWidgets.QPushButton(self.centralwidget)
        self.orbButton.setGeometry(QtCore.QRect(740, 540, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.orbButton.setFont(font)
        self.orbButton.setObjectName("orbButton")
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1048, 26))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi(self)
        self.siftButton.clicked.connect(lambda: self.sift_detect(file_name))
        QtCore.QMetaObject.connectSlotsByName(self)

    def sift_detect(self, file_name):
        img = cv2.imread(file_name, cv2.IMREAD_GRAYSCALE)
        cap = cv2.VideoCapture('IMG_0076.MOV')
        sift = cv2.SIFT_create()
        sift = cv2.SIFT_create()
        kp_image, desc_image = sift.detectAndCompute(img, None)

        index_params = dict(algorithm=0, trees=5)
        search_params = dict()
        flann = cv2.FlannBasedMatcher(index_params, search_params)
        cv2.namedWindow("Homography", cv2.WINDOW_NORMAL)
        while cap.isOpened():
            _, frame = cap.read()

            gray_frame = cv2.cvtColor(frame, cv2.IMREAD_GRAYSCALE)

            kp_grayframe, desc_grayframe = sift.detectAndCompute(gray_frame, None)

            matches = flann.knnMatch(desc_image, desc_grayframe, k=2)
            good_points = []
            for m, n in matches:
                if m.distance < 0.8 * n.distance:
                    good_points.append(m)
            cv2.namedWindow("Homography", cv2.WINDOW_NORMAL)
            if len(good_points) > 10:
                query_pts = np.float32([kp_image[m.queryIdx].pt for m in good_points]).reshape(-1, 1, 2)
                train_pts = np.float32([kp_grayframe[m.trainIdx].pt for m in good_points]).reshape(-1, 1, 2)
                matrix, mask = cv2.findHomography(query_pts, train_pts, cv2.RANSAC, 5.0)
                matches_mask = mask.ravel().tolist()
                # Perspective transform
                h, w = img.shape
                pts = np.float32([[0, 0], [0, h], [w, h], [w, 0]]).reshape(-1, 1, 2)
                dst = cv2.perspectiveTransform(pts, matrix)
                homography = cv2.polylines(frame, [np.int32(dst)], True, (255, 0, 0), 3)
                cv2.imshow("Homography", homography)
            else:
                cv2.imshow("Homography", gray_frame)
            key = cv2.waitKey(1)
            if key == 1:
                break
        cap.release()
        cv2.destroyAllWindows()

    def retranslateUi(self, DetectObjectWindow):
        _translate = QtCore.QCoreApplication.translate
        DetectObjectWindow.setWindowTitle(_translate("DetectObjectWindow", "Окно отслеживания"))
        self.siftButton.setText(_translate("DetectObjectWindow", "SIFT"))
        self.surfButton.setText(_translate("DetectObjectWindow", "SURF"))
        self.orbButton.setText(_translate("DetectObjectWindow", "ORB"))
